from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart    # CommandStart (/start), Command (–ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã)
from aiogram.fsm.state import State, StatesGroup      # —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
from aiogram.fsm.context import FSMContext            # –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π

import emoji

from datetime import datetime

import app.keyboards as kb
import result_date_time as result    # result_date_time(selected_procedure, selected_place)
import set_schedule as ss

router = Router()     # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π

# –í–≤–æ–¥–∏–º –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö—Å—è –≤ –∫–æ–¥–µ –∏ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(StatesGroup):
    user_name = State()
    user_acc = State()
class ProcedureSelection(StatesGroup):
    procedure = State()
class PlaceSelection(StatesGroup):
    place = State()
class DateTimeSelection(StatesGroup):
    date_time = State()
class PhoneNumberSelection(StatesGroup):
    phone = State()
class AddNote(StatesGroup):
    add_note = State()
    note = State()

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
procedures = ['–ú–µ–∂—Ä–µ—Å–Ω–∏—á–∫–∞', '–í–æ–ª–æ—Å–∫–∏', '–ì–∏–ø–µ—Ä—Ä–µ–∞–ª–∏–∑–º', '–ü—É–¥—Ä–æ–≤–æ–µ']
places = ['–ó–≤–µ–∑–¥–Ω–∞—è', '–ü—É—à–∫–∏–Ω']
dt = []                          # –ø—É—Å—Ç–æ–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
add_note_answers = ["–í–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø–∏—Å—å"]
veron_chat_id = '1462946426'        # id —á–∞—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –∑–∞—è–≤–∫–∞—Ö

@router.message(CommandStart())                                # –ª–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É /start
async def start(message: Message, bot, state: FSMContext):     # –æ–ø–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç —é–∑–µ—Ä–∞, —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç –±–æ—Ç–∞, —Å–º–µ–Ω–∞–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    print("–ë–æ—Ç –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ.")
    global dt
    print(f"===== dt –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ start = {dt}")
    dt = []   # –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
    print(f"===== dt –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ start –∏ –æ—á–∏—Å—Ç–∫–∏ = {dt}")
    await state.set_state(User.user_name)                      # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–Ω–æ–π (–ø–æ–∫–∞ –ø—É—Å—Ç–∞—è)
    await state.set_state(User.user_acc)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–Ω–æ–π (–ø–æ–∫–∞ –ø—É—Å—Ç–∞—è)
    user = message.from_user
    user_name = user.first_name                                # –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –µ–≥–æ –∏–º—è
    user_acc = user.username

    await state.set_state(ProcedureSelection.procedure)        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n–Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –º–∞—Å—Ç–µ—Ä—É –í–µ—Ä–æ–Ω–∏–∫–µ.")
    #await state.update_data(user_name=user_name)               # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –≤ —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–µ–Ω–æ–π –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)

    keyboard_procedures = kb.create_keyboard_procedures(procedures)             # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Ñ-—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞ keyboards.py)
    await bot.send_message(message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ üìùüëá", reply_markup=keyboard_procedures)
            # –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É Reply (–∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É) - –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è –≤ —á–∞—Ç —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∏

@router.message(ProcedureSelection.procedure)                  # –ª–æ–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ state
async def process_procedure_choice(message: Message, state: FSMContext):
    selected_procedure = ''
    if message.text not in procedures:                         # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ üëá")
    else:
        selected_procedure = message.text                      # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –û–ö, —Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

    await state.update_data(user_name=message.from_user.first_name)    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –≤ —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø–æ–ª—É—á–∏–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —é–∑–µ—Ä–∞)
    await state.update_data(user_acc=message.from_user.username)              # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º user_acc  –≤ —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø–æ–ª—É—á–∏–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —é–∑–µ—Ä–∞)
    await state.update_data(procedure=selected_procedure)              # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤ —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.set_state(PlaceSelection.place)                        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–∏ÃÜ

    keyboard_places = kb.create_keyboard_places(places)
    await message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞: {selected_procedure}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ üß≠üëá", reply_markup=keyboard_places)


@router.message(PlaceSelection.place)
async def process_place_choice(message: Message, bot, state: FSMContext):
    selected_place = ''
    if message.text not in places:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ üëá")
    else:
        selected_place = message.text
    await state.update_data(place=selected_place)
    await state.set_state(DateTimeSelection.date_time)

    await message.answer(f"–í—ã–±—Ä–∞–Ω–æ –º–µ—Å—Ç–æ: {selected_place}. \n–°–µ–π—á–∞—Å —Å–≤–µ—Ä—é –≥—Ä–∞—Ñ–∏–∫ –∏ –≤–µ—Ä–Ω—É—Å—å –∫ –í–∞–º (–≤ —Ç–µ—á–µ–Ω–∏–µ 15-30 —Å–µ–∫—É–Ω–¥), –≤—ã–±–µ—Ä–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã {emoji.emojize(':man_running_facing_right:')}", reply_markup=kb.ReplyKeyboardRemove())

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —ç–º–æ–¥–∑–∏ - –ø–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã
    await bot.send_message(message.chat.id, "\U000023F3")

    data = await state.get_data()
    df_result = result.result_date_time(data["procedure"], data["place"])  # —Å–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º df_result - –≤ —Ñ–∞–π–ª–µ result_date_time.py –ø–æ–ª—É—á–∞–µ–º final_df

    # –ó–∞–ø–æ–ª–Ω—è–µ–º dt –∏–∑ df_result
    dates = df_result.index
    for date in dates:
        times = [time for time in df_result.loc[date] if time != '']    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        if times:
            for time in times:
                dt.append(f"{date} {time}")
    #print(f"dt —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑ df_result: {dt}")
    keyboard_dates_and_times = kb.create_keyboard_dates_and_times(dt)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è üìÜüëá", reply_markup=keyboard_dates_and_times)


@router.message(DateTimeSelection.date_time)
async def process_date_time_choice(message: Message, state: FSMContext):

    dt_formatted = []                      # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ dt —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∏—Ö —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    for date_time in dt:
        date, time = date_time.split()
        formatted_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d-%m-%Y")
        formatted_date_time = f"{formatted_date} {time}"
        dt_formatted.append(formatted_date_time)

    selected_date_time = ''
    if message.text not in dt_formatted:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ üëá")
    else:
        selected_date_time = message.text
    await state.update_data(date_time=selected_date_time)
    await state.set_state(PhoneNumberSelection.phone)

    keyboard_phone = kb.create_keyboard_get_phone()             # –≤—ã–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ö–æ–Ω—Ç–∞–∫—Ç —Ç–µ–ª–µ–≥—Ä–∞–º
    await message.answer(f"–í—ã–±—Ä–∞–Ω—ã –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {selected_date_time}.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚òéÔ∏è üëá", reply_markup=keyboard_phone)

@router.message(PhoneNumberSelection.phone)
async def process_phone_number(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä' üëá")
    else:
        phone_number = message.contact.phone_number              # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –ö–æ–Ω—Ç–∞–∫—Ç–∞
        await state.update_data(phone=phone_number)
        await state.set_state(AddNote.add_note)

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        keyboard_add_note = kb.create_keyboard_add_note(add_note_answers)
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–µ–Ω.\n –•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–ø–∏—Å–∏?", reply_markup=keyboard_add_note)

@router.message(AddNote.add_note)                               # –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: 1 - –¥–∞, 2 - –Ω–µ—Ç
async def button_note_click(message: Message, bot, state: FSMContext):
    if message.text not in add_note_answers:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö üëá")
    else:
        if message.text == '–í–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ':
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (–¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤):")
            await state.update_data(add_note=1)
            await state.set_state(AddNote.note)
        elif message.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø–∏—Å—å":
            await state.update_data(add_note=2)

            data2 = await state.get_data()       # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á–∞–º (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º)
            procedure = data2["procedure"]
            place = data2["place"]
            date_time = data2["date_time"]
            phone = data2["phone"]
            user_acc = data2["user_acc"]
            user_name = data2["user_name"]
            note = "_"
            user_link = f"https://t.me/{user_acc}"


            send_to_db(date_time, procedure, place, phone, user_name, user_link, note)   # –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏ –≤ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await message.answer(f"–°–ø–∞—Å–∏–±–æ! üéØ\n–í–µ—Ä–æ–Ω–∏–∫–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üëç‚òÄÔ∏è‚ù§Ô∏è",reply_markup=kb.ReplyKeyboardRemove())
            now = datetime.now()
            formatted_now = now.strftime("%Y-%m-%d %H:%M:%S")    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–æ—Ç–æ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä—É –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
            await bot.send_message(veron_chat_id,
                                   f"{formatted_now} - –ó–∞–ø–∏—Å–∞–ª—Å—è –∫–ª–∏–µ–Ω—Ç: {user_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n–õ–∏–Ω–∫(TG): {user_link}\n"
                                   f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {date_time}\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}\n–ú–µ—Å—Ç–æ: {place}\n"
                                   f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}")

@router.message(AddNote.note)
async def process_note(message: Message, bot, state: FSMContext):
    data0 = await state.get_data()
    add_note = data0["add_note"]
    note = message.text
    if len(note) > 60 and add_note == 1:
        await message.answer("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª–∏–Ω–æ–π –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤ ‚õî")
    elif len(note) <= 60 and add_note == 1:
        await state.update_data(note=note)

        data3 = await state.get_data()      # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á–∞–º (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º)
        procedure = data3["procedure"]
        place = data3["place"]
        date_time = data3["date_time"]
        phone = data3["phone"]
        user_acc = data3["user_acc"]
        user_name = data3["user_name"]
        if note is not None:
            note = data3["note"]
        else:
            note = "_"
        user_link = f"https://t.me/{user_acc}"

        send_to_db(date_time, procedure, place, phone, user_name, user_link, note)   # –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏ –≤ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await message.answer(f"–°–ø–∞—Å–∏–±–æ! üéØ\n–í–µ—Ä–æ–Ω–∏–∫–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üëç‚òÄÔ∏è‚ù§Ô∏è", reply_markup=kb.ReplyKeyboardRemove())
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–æ—Ç–æ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä—É –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
        now = datetime.now()
        formatted_now = now.strftime("%Y-%m-%d %H:%M:%S")
        await bot.send_message(veron_chat_id, f"{formatted_now} - –ó–∞–ø–∏—Å–∞–ª—Å—è –∫–ª–∏–µ–Ω—Ç: {user_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n–õ–∏–Ω–∫(TG): {user_link}\n"
                                              f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {date_time}\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}\n–ú–µ—Å—Ç–æ: {place}\n"
                                              f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}")
    else:
        pass

# –§-—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∑–∞—è–≤–∫–∏ –≤ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
def send_to_db(date_time, procedure, place, phone, user_name, user_link, note):

    print(procedure)
    print(place)
    print(date_time)
    print(phone)
    print(user_name)
    print(user_link)
    print(note)

    ss.set_schedule(date_time, procedure, place, phone, user_name, user_link, note)
