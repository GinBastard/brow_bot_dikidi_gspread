from aiogram import F, Router
from aiogram.types import Message, CallbackQuery ,InlineKeyboardButton,  InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import emoji

from datetime import datetime

import phonenumbers

import app.keyboards as kb
import result_date_time as result    # result_date_time(selected_procedure, selected_place)
import set_schedule as ss

router = Router()

class User(StatesGroup):
    user_name = State()
class ProcedureSelection(StatesGroup):
    procedure = State()
class PlaceSelection(StatesGroup):
    place = State()
class DateTimeSelection(StatesGroup):
    date_time = State()
class PhoneNumberSelection(StatesGroup):
    phone = State()
class AddNote(StatesGroup):
    add_note = State()
    note = State()


procedures = ['–ú–µ–∂—Ä–µ—Å–Ω–∏—á–∫–∞', '–í–æ–ª–æ—Å–∫–∏', '–ì–∏–ø–µ—Ä—Ä–µ–∞–ª–∏–∑–º', '–ü—É–¥—Ä–æ–≤–æ–µ']
places = ['–ó–≤–µ–∑–¥–Ω–∞—è', '–ü—É—à–∫–∏–Ω']
dt = []
add_note_answers = ["–í–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø–∏—Å—å"]
veron_chat_id = '1462946426'

@router.message(CommandStart())    #(CommandStart(), User.user_name)
async def start(message: Message, bot, state: FSMContext):     #(bot, message: Message,  state: FSMContext)
    #await state.clear()
    print("–ë–æ—Ç –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ.")
    await state.set_state(User.user_name)
    user = message.from_user
    user_name = user.first_name

    await state.set_state(ProcedureSelection.procedure)

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n–Ø –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –º–∞—Å—Ç–µ—Ä—É –í–µ—Ä–æ–Ω–∏–∫–µ.")
    await state.update_data(user_name=user_name)

    keyboard_procedures = kb.create_keyboard_procedures(procedures)
    await bot.send_message(message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ üìùüëá", reply_markup=keyboard_procedures)


@router.message(ProcedureSelection.procedure)
async def process_procedure_choice(message: Message, state: FSMContext):


    if message.text not in procedures:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ üëá")
    else:
        selected_procedure = message.text

    await state.update_data(user_name=message.from_user.first_name)
    await state.update_data(procedure=selected_procedure)
    await state.set_state(PlaceSelection.place)

    keyboard_places = kb.create_keyboard_places(places)
    await message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞: {selected_procedure}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ {emoji.emojize(':compass:')} üëá", reply_markup=keyboard_places)


@router.message(PlaceSelection.place)
async def process_place_choice(message: Message, bot, state: FSMContext):

    if message.text not in places:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ üëá")
    else:
        selected_place = message.text
    await state.update_data(place=selected_place)
    await state.set_state(DateTimeSelection.date_time)

    await message.answer(f"–í—ã–±—Ä–∞–Ω–æ –º–µ—Å—Ç–æ: {selected_place}. \n–°–µ–π—á–∞—Å —Å–≤–µ—Ä—é –≥—Ä–∞—Ñ–∏–∫ –∏ –≤–µ—Ä–Ω—É—Å—å –∫ –í–∞–º (–≤ —Ç–µ—á–µ–Ω–∏–µ 15-30 —Å–µ–∫—É–Ω–¥), –≤—ã–±–µ—Ä–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã {emoji.emojize(':man_running_facing_right:')}", reply_markup=kb.ReplyKeyboardRemove())

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —ç–º–æ–¥–∑–∏ - –ø–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã
    await bot.send_message(message.chat.id, "\U000023F3")

    data = await state.get_data()
    df_result = result.result_date_time(data["procedure"], data["place"])  # —Å–æ–∑–¥–∞–µ–º df_result - –≤ —Ñ–∞–π–ª–µ result_date_time.py

    # –ó–∞–ø–æ–ª–Ω—è–µ–º dt –∏–∑ df_result
    dates = df_result.index
    for date in dates:
        times = [time for time in df_result.loc[date] if time != '']
        if times:
            for time in times:
                dt.append(f"{date} {time}")

    keyboard_dates_and_times = kb.create_keyboard_dates_and_times(dt)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è üìÜüëá", reply_markup=keyboard_dates_and_times)


@router.message(DateTimeSelection.date_time)
async def process_date_time_choice(message: Message, state: FSMContext):

    dt_formatted = []      # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ dt —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∏—Ö —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    for date_time in dt:
        date, time = date_time.split()
        formatted_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d-%m-%Y")
        formatted_date_time = f"{formatted_date} {time}"
        dt_formatted.append(formatted_date_time)

    if message.text not in dt_formatted:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ üëá")
    else:
        selected_date_time = message.text
    await state.update_data(date_time=selected_date_time)
    await state.set_state(PhoneNumberSelection.phone)

    keyboard_phone = kb.create_keyboard_get_phone()
    await message.answer(f"–í—ã–±—Ä–∞–Ω—ã –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {selected_date_time}.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚òéÔ∏è üëá", reply_markup=keyboard_phone)

@router.message(PhoneNumberSelection.phone)    # , F.contact
async def process_phone_number(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä' üëá")
    else:
        phone_number = message.contact.phone_number
        await state.update_data(phone=phone_number)
        await state.set_state(AddNote.add_note)

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        keyboard_add_note = kb.create_keyboard_add_note(add_note_answers)
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–µ–Ω.\n –•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∑–∞–ø–∏—Å–∏?", reply_markup=keyboard_add_note)

@router.message(AddNote.add_note)
async def button_note_click(message: Message, state: FSMContext):
    if message.text not in add_note_answers:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö üëá")
    else:
        if message.text == '–í–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ':
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (–¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤):")
            await state.update_data(add_note=1)
            await state.set_state(AddNote.note)
        elif message.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø–∏—Å—å":
            await state.update_data(add_note=2)

            data2 = await state.get_data()
            procedure = data2["procedure"]
            place = data2["place"]
            date_time = data2["date_time"]
            phone = data2["phone"]
            user_name = data2["user_name"]
            note = "_"

            send_to_db(date_time, procedure, place, phone, user_name, note)
            await message.answer(f"–°–ø–∞—Å–∏–±–æ! üéØ\n–í–µ—Ä–æ–Ω–∏–∫–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üëç‚òÄÔ∏è‚ù§Ô∏è",reply_markup=kb.ReplyKeyboardRemove())


@router.message(AddNote.note)
async def process_note(message: Message, bot, state: FSMContext):
    data0 = await state.get_data()
    add_note = data0["add_note"]
    note = message.text
    if len(note) > 60 and add_note == 1:
        await message.answer("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª–∏–Ω–æ–π –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤ ‚õî")
    elif len(note) <= 60 and add_note == 1:
        await state.update_data(note=note)

        data3 = await state.get_data()
        procedure = data3["procedure"]
        place = data3["place"]
        date_time = data3["date_time"]
        phone = data3["phone"]
        user_name = data3["user_name"]
        if note is not None:
            note = data3["note"]
        else:
            note = "_"

        send_to_db(date_time, procedure, place, phone, user_name, note)
        await message.answer(f"–°–ø–∞—Å–∏–±–æ! üéØ\n–í–µ—Ä–æ–Ω–∏–∫–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üëç‚òÄÔ∏è‚ù§Ô∏è", reply_markup=kb.ReplyKeyboardRemove())
        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        now = datetime.now()
        formatted_now = now.strftime("%Y-%m-%d %H:%M:%S")
        await bot.send_message(veron_chat_id, f"{formatted_now} - –ó–∞–ø–∏—Å–∞–ª—Å—è –∫–ª–∏–µ–Ω—Ç: {user_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {date_time}\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}\n–ú–µ—Å—Ç–æ: {place}\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}")
    else:
        pass

def send_to_db(date_time, procedure, place, phone, user_name, note):

    print(procedure)
    print(place)
    print(date_time)
    print(phone)
    print(user_name)
    print(note)

    ss.set_schedule(date_time, procedure, place, phone, user_name, note)
